name: Deploy to Staging

on:
  push:
    branches: [ develop, main ]
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ develop, main ]

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    environment:
      name: staging
      url: ${{ vars.STAGING_URL || 'https://familychef-staging.fly.dev' }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.CONTAINER_REGISTRY || 'ghcr.io' }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ vars.CONTAINER_REGISTRY || 'ghcr.io' }}/${{ github.repository }}:staging
          ${{ vars.CONTAINER_REGISTRY || 'ghcr.io' }}/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Fly.io deployment (if using Fly.io)
    - name: Deploy to Fly.io Staging
      if: ${{ vars.DEPLOY_TO_FLY == 'true' }}
      uses: superfly/flyctl-actions/setup-flyctl@master
      with:
        version: latest
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    - name: Deploy to Fly.io
      if: ${{ vars.DEPLOY_TO_FLY == 'true' }}
      run: |
        flyctl deploy --app ${{ vars.FLY_APP_NAME || 'familychef-staging' }} --dockerfile Dockerfile
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    # Alternative: Dokku deployment (if using Dokku)
    - name: Deploy to Dokku Staging
      if: ${{ vars.DEPLOY_TO_DOKKU == 'true' }}
      uses: dokku/github-action@master
      with:
        git_remote_url: ${{ vars.DOKKU_GIT_URL }}
        ssh_private_key: ${{ secrets.DOKKU_SSH_PRIVATE_KEY }}
        deploy_docker_image: ${{ vars.CONTAINER_REGISTRY || 'ghcr.io' }}/${{ github.repository }}:${{ github.sha }}

    # Post-deployment health check
    - name: Health check staging deployment
      run: |
        sleep 30  # Wait for deployment to complete
        
        STAGING_URL="${{ vars.STAGING_URL || 'https://familychef-staging.fly.dev' }}"
        
        # Check health endpoint
        curl -f "$STAGING_URL/api/health/" || exit 1
        
        # Check main pages are accessible
        curl -f "$STAGING_URL/" || exit 1
        curl -f "$STAGING_URL/chef/" || exit 1
        curl -f "$STAGING_URL/pantry/" || exit 1
        curl -f "$STAGING_URL/shopping/" || exit 1
        
        echo "✅ Staging deployment health check passed"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Successfully deployed to staging: ${{ vars.STAGING_URL || 'https://familychef-staging.fly.dev' }}"
        else
          echo "❌ Staging deployment failed"
          exit 1
        fi

  staging-e2e-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: ${{ needs.deploy-staging.result == 'success' }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps

    - name: Run E2E tests against staging
      run: |
        cd tests
        pytest -v --tb=short -m "not @auth_required"
      env:
        E2E_BASE_URL: ${{ vars.STAGING_URL || 'https://familychef-staging.fly.dev' }}

    - name: Upload staging E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: staging-e2e-test-results
        path: tests/test-results/