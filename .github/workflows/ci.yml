name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_familychef
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "DEBUG=1" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci-only" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_familychef" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV

    - name: Run Django system checks
      run: |
        python manage.py check

    - name: Run migrations
      run: |
        python manage.py migrate

    - name: Run tests
      run: |
        python manage.py test

    - name: Test Django development server startup
      run: |
        python manage.py runserver --noreload &
        SERVER_PID=$!
        sleep 5
        curl -f http://localhost:8000/api/health/ || exit 1
        kill $SERVER_PID

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t familychef:test .

    - name: Test Docker compose services
      run: |
        docker compose up -d
        sleep 30
        curl -f http://localhost:8000/api/health/ || exit 1
        docker compose down

  security-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies and security tools
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Check for security vulnerabilities in dependencies
      run: |
        safety scan -r requirements.txt || echo "Security vulnerabilities found - please review"

    - name: Run bandit security linter
      run: |
        bandit -r . -x './venv/*,./env/*,./.git/*' -f json -o bandit-results.json || true
        cat bandit-results.json

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies and linting tools
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Black formatter check
      run: |
        black --check --diff . || echo "Black formatting issues found - run 'black .' to fix"

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff . || echo "Import sorting issues found - run 'isort .' to fix"

    - name: Run flake8 linter
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics